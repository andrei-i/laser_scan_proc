#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <math.h>

using namespace sensor_msgs;

ros::Publisher pub;

float replace = std::numeric_limits<float>::infinity();

void callback(const LaserScanConstPtr& scan) {
  LaserScan filtered = *scan;

  for (size_t i = 0; i < filtered.ranges.size(); ++i) {
    if (isnan(filtered.ranges[i]) || filtered.ranges[i]>1.5) {
      filtered.ranges[i] = replace;
    }
  }
  pub.publish(filtered);
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "laser_filter");

  ros::NodeHandle nh;

  pub = nh.advertise<LaserScan>("scan/filtered", 50);

  nh.getParam("replace_with", replace);

  ros::Subscriber sub = nh.subscribe("scan", 2, callback);

  ros::spin();

  return 0;
}
